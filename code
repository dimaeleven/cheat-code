#!/bin/bash

set -euo pipefail

# ----------------------------------------
# Minecraft Cheat Scanner - Improved Version
# Description: Scans Minecraft folders, running processes, and launchctl for known cheat signatures.
# Logs results with timestamps and enhanced formatting.
# ----------------------------------------

# Default log file location
DEFAULT_LOGFILE=~/Desktop/minecraft_cheat_scan.log

# Use user-provided log file path or default
LOGFILE="${1:-$DEFAULT_LOGFILE}"

# List of keywords to search for - keep lowercase for consistency
KEYWORDS=(
  kami kamiblue pyro impact wurst inertia liquidbounce sigma neverhook zamorozka minced wexside shit expensive wild
  fluger norender keaz xray meteor blackberry nursultan avalone rockstar mercu div niobium kion akrien celestial
  deadcode external norules rage bebraware rynware neverware aristois freecam baritone skillclient vape future
  gishcode boberware flauncher exloader mc100 editme cheat.dll .vape .jar
)

# Format the keywords for search in find and grep easily
# We will build a regex pattern joined by | (escape dots)
function build_regex_pattern() {
  local pattern=""
  local first=1
  for k in "${KEYWORDS[@]}"; do
    # Escape dots to avoid regex matching any character
    esc=$(printf '%s' "$k" | sed 's/\./\\./g')
    if [ $first -eq 1 ]; then
      pattern="$esc"
      first=0
    else
      pattern="$pattern|$esc"
    fi
  done
  echo "$pattern"
}

SEARCH_REGEX="$(build_regex_pattern)"

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

FOUND_CHEATS=0

# Timestamp function for log entries
timestamp() {
  date "+%Y-%m-%d %H:%M:%S"
}

# Log and terminal output function with color and timestamp
log_info() {
  local msg="$1"
  echo -e "${CYAN}[$(timestamp)]${RESET} $msg" | tee -a "$LOGFILE"
}

log_warn() {
  local msg="$1"
  echo -e "${YELLOW}[$(timestamp)] WARNING:${RESET} $msg" | tee -a "$LOGFILE"
}

log_error() {
  local msg="$1"
  echo -e "${RED}[$(timestamp)] ERROR:${RESET} $msg" | tee -a "$LOGFILE"
}

log_success() {
  local msg="$1"
  echo -e "${GREEN}[$(timestamp)] SUCCESS:${RESET} $msg" | tee -a "$LOGFILE"
}

# Initialize log file
{
  echo "üïµÔ∏è Minecraft Cheat Detection Report ‚Äî $(date)"
  echo "============================================="
} > "$LOGFILE"

log_info "üìÅ Starting scan of Minecraft folders for cheat files..."

MINECRAFT_DIR=~/Library/Application\ Support/minecraft

# Find suspicious files matching keywords, case-insensitive
found_files=()
while IFS= read -r file; do
  found_files+=("$file")
done < <(
  find "$MINECRAFT_DIR" -type f -iname "*.*" 2>/dev/null | grep -E -i -- "$SEARCH_REGEX" || true
)

if [ ${#found_files[@]} -gt 0 ]; then
  for f in "${found_files[@]}"; do
    DIR_PATH=$(dirname "$f")
    FILE_NAME=$(basename "$f")
    log_warn "üö® Found suspicious file: $FILE_NAME"
    log_warn "üìÇ Directory: $DIR_PATH"
    FOUND_CHEATS=1
  done
else
  log_success "No suspicious cheat files found in Minecraft folders."
fi

log_info "üîé Checking active processes for suspicious keywords..."

# Efficiently search for processes matching keywords using pgrep (case-insensitive, partial match)
# pgrep does not support regex OR, so we iterate keywords and aggregate results uniquely
found_procs=()
declare -A proc_seen

for k in "${KEYWORDS[@]}"; do
  mapfile -t proc_list < <(pgrep -fi "$k" || true)
  for pid in "${proc_list[@]}"; do
    if [ -n "$pid" ] && [ -z "${proc_seen[$pid]:-}" ]; then
      proc_seen[$pid]=1
      found_procs+=("$pid")
    fi
  done
done

if [ ${#found_procs[@]} -gt 0 ]; then
  for pid in "${found_procs[@]}"; do
    proc_cmd=$(ps -p "$pid" -o user=,pid=,pcpu=,pmem=,etime=,args=)
    log_warn "üö® Suspicious process detected (PID $pid):"
    echo "$proc_cmd" | tee -a "$LOGFILE"
    FOUND_CHEATS=1
  done
else
  log_success "No suspicious processes detected."
fi

log_info "üì¶ Checking launchctl for suspicious entries..."

# Check launchctl list for suspicious keywords; output full lines for context
if launchctl list 2>/dev/null | grep -Ei -- "$SEARCH_REGEX" | tee -a "$LOGFILE"; then
  FOUND_CHEATS=1
else
  log_success "No suspicious launchctl entries found."
fi

# Summary
log_info "======================"
if [ "$FOUND_CHEATS" -eq 1 ]; then
  log_warn "‚ùó Suspicious files, processes, or launchctl entries were found."
else
  log_success "‚úÖ System is clean. No signs of cheats detected."
fi
log_info "üìÑ Report saved to: $LOGFILE"
log_info "======================"

exit 0
