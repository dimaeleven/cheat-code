#!/bin/bash

set -euo pipefail

# ----------------------------------------
# Minecraft Ultimate Cheat Scanner for macOS
# User-Friendly Output Version
# Compatible with Bash 3.x (no associative arrays)
# ----------------------------------------

DEFAULT_LOGFILE=~/Desktop/minecraft_ultimate_cheat_scan_readable.log
LOGFILE="${1:-$DEFAULT_LOGFILE}"

KEYWORDS=(
  kami kamiblue pyro impact wurst inertia liquidbounce sigma neverhook zamorozka minced wexside shit expensive wild
  fluger norender keaz xray meteor blackberry nursultan avalone rockstar mercu div niobium kion akrien celestial
  deadcode external norules rage bebraware rynware neverware aristois freecam baritone skillclient vape future
  gishcode boberware flauncher exloader mc100 editme cheat.dll .vape .jar
  cheatengine hackclient cheatclient inject dllinjector injector hacktool trainer memoryeditor asm_debugger
  cheatenginex pearl eclipse ghost vapex vapor vaporwave vaporwaveclient vaporclient
  liquidbounceplus liquidbouncefree liquidbouncev2 liquidbouncepremium vaporwavepremium vaporwaveplus
  baritoneplus baritonefree baritoneclient baritonev2 baritonepremium
  impactplus impactpremium impactfree
  ghostclient ghostprogram ghostv2 ghostpremium
  pyroplus pyropremium pyrofree
  wurstplus wurstfree wurstpremium
  nursultanplus nursultanfree nursultanpremium
  mcfunctionedit mcfunction
  cheatengine64 cheatengine32 cheatengine_androidx
  externalhack injector64 inject64
  dllhijack dllinject dllinject64 dllload dllinjector64
  .dll .so .dylib .jar .exe .bat .command
  cheatclient* hacktool* injector* vapex* ghost* pyro* liquidbounce* baritone* impact*
  cheats cheats_disabled hacks mods forbiddenmods unapprovedmods
)

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

FOUND_CHEATS=0
FOUND_COUNT=0

timestamp() {
  date "+%Y-%m-%d %H:%M:%S"
}

log_header() {
  printf "\n%s\n%s\n" "=== Minecraft Ultimate Cheat Scan Report ===" "Generated: $(timestamp)"
}

log_section() {
  printf "\n%s\n" "-------- $1 --------"
}

log_found_file() {
  printf "${YELLOW}Detected File:${RESET}\n  %s\n${YELLOW}Directory:${RESET}\n  %s\n" "$1" "$2" | tee -a "$LOGFILE"
}

log_found_process() {
  printf "${YELLOW}Detected Process (PID %s):${RESET}\n%s\n" "$1" "$2" | tee -a "$LOGFILE"
}

log_found_launchctl() {
  printf "${YELLOW}Detected Launchctl Entry:${RESET}\n%s\n" "$1" | tee -a "$LOGFILE"
}

log_info() {
  printf "${CYAN}%s${RESET}\n" "$1" | tee -a "$LOGFILE"
}

log_success() {
  printf "${GREEN}%s${RESET}\n" "$1" | tee -a "$LOGFILE"
}

build_regex_pattern() {
  local pattern=""
  local first=1
  for k in "${KEYWORDS[@]}"; do
    esc=$(printf '%s' "$k" | sed 's/\./\\./g')
    if [ $first -eq 1 ]; then
      pattern="$esc"
      first=0
    else
      pattern="$pattern|$esc"
    fi
  done
  echo "$pattern"
}

SEARCH_REGEX=$(build_regex_pattern)

DIRS_TO_SCAN=(
  "$HOME/Library/Application Support/minecraft"
  "$HOME/Library/LaunchAgents"
  "/Library/LaunchAgents"
  "/Library/LaunchDaemons"
  "$HOME/Downloads"
  "$HOME/.local/share/minecraft"
  "$HOME/.minecraft"
  "/Applications"
  "$HOME/Library/Containers"
  "$HOME/Desktop"
)

# Clear log file before use
: > "$LOGFILE"
log_header | tee -a "$LOGFILE"

log_section "Scanning Directories for Suspicious Files"
for dir in "${DIRS_TO_SCAN[@]}"; do
  if [ -d "$dir" ]; then
    log_info "Scanning directory: $dir"
    while IFS= read -r file; do
      FOUND_CHEATS=1
      FOUND_COUNT=$((FOUND_COUNT+1))
      dirpath=$(dirname "$file")
      filename=$(basename "$file")
      log_found_file "$filename" "$dirpath"
    done < <(find "$dir" -type f -iregex ".*\$${SEARCH_REGEX}\$.*" -maxdepth 10 2>/dev/null || true)
  fi
done

# Initialize an empty string to track found PIDs as a space-separated list
found_pids=""

pid_in_list() {
  local pid=$1
  case " $found_pids " in
    *" $pid "*) return 0 ;;
    *) return 1 ;;
  esac
}

log_section "Scanning Running Processes"
for k in "${KEYWORDS[@]}"; do
  while IFS= read -r pid; do
    if [ -n "$pid" ]; then
      if ! pid_in_list "$pid"; then
        found_pids="$found_pids $pid"
        proc_info=$(ps -p "$pid" -o user=,pid=,pcpu=,pmem=,etime=,args=)
        if echo "$proc_info" | grep -iqE "$SEARCH_REGEX"; then
          FOUND_CHEATS=1
          FOUND_COUNT=$((FOUND_COUNT+1))
          log_found_process "$pid" "$proc_info"
        fi
      fi
    fi
  done < <(pgrep -fi "$k" || true)
done

log_section "Checking Launchctl Agents and Daemons"
if launchctl list 2>/dev/null | grep -Ei --color=never "$SEARCH_REGEX" | tee -a "$LOGFILE"; then
  FOUND_CHEATS=1
  FOUND_COUNT=$((FOUND_COUNT+1))
else
  log_info "No suspicious launchctl entries found."
fi

log_section "Checking cron Jobs"
CRON_FILES=("/usr/lib/cron/tabs/$USER" "/var/at/tabs/$USER" "/etc/crontab")
for cronfile in "${CRON_FILES[@]}"; do
  if [ -f "$cronfile" ]; then
    if grep -Ei --color=never "$SEARCH_REGEX" "$cronfile" >> "$LOGFILE"; then
      FOUND_CHEATS=1
      FOUND_COUNT=$((FOUND_COUNT+1))
      printf "${YELLOW}Suspicious cron entry found in %s${RESET}\n" "$cronfile" | tee -a "$LOGFILE"
    fi
  fi
done

log_section "Checking Shell Profiles for Suspicious Entries"
SHELL_PROFILES=(~/.bash_profile ~/.bashrc ~/.zshrc ~/.profile ~/.zshenv)
for profile in "${SHELL_PROFILES[@]}"; do
  if [ -f "$profile" ]; then
    if grep -Ei --color=never "$SEARCH_REGEX" "$profile" >> "$LOGFILE"; then
      FOUND_CHEATS=1
      FOUND_COUNT=$((FOUND_COUNT+1))
      printf "${YELLOW}Suspicious cheat reference found in shell profile: %s${RESET}\n" "$profile" | tee -a "$LOGFILE"
    fi
  fi
done

log_section "Scan Summary"
if [ "$FOUND_CHEATS" -eq 1 ]; then
  log_success "Scan complete: Found $FOUND_COUNT suspicious indication(s) related to Minecraft cheats."
else
  log_success "Scan complete: No Minecraft cheat indications detected."
fi

log_info "Full report saved to: $LOGFILE"

exit 0
